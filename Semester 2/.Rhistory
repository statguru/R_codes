print(z)
return(sum(z))
}
f2(x,3,1)
f3<-function(x) 4*x^3+5*x+3
integrate(f3,1,3)
?t.test
a2<-c(25,45,78,45)
b2<-rep(1/4,4)
chisq.test(a2,b2)
chisq.test(a2)
rm(list=ls())
require(lattice)
x<-singer$height
str(x)
class(x)
length(x)
y<-sample(x,size=20,replace= F)
mx<-mean(x)
t.test(y,mu=mx)
z<-sample(x,size=20,replace=F)
t.test(y,z,paired=T)
t.test(extra~group,data=sleep)
t.test(extra~group,data=sleep)
?z.test
e1071::allShortestPaths()
x1<-rnorm(n,mean=5,sd=10)
n<-100
x1<-rnorm(n,mean=5,sd=10)
z_tab<-(mean(x1)-5)/(10/sqrt(n))
z_tab
z_stat<-(mean(x1)-5)/(10/sqrt(n))
z_stat
x1<-rnorm(n,mean=5,sd=10)
z_stat<-(mean(x1)-5)/(10/sqrt(n))
z_stat
?dnorm
p_val<-pnorm(z_stat)
p_val
p_val<-dnorm(z_stat)
p_val
p_val<-pnorm(z_stat)
p_val
p_val<-2*min(pnorm(z_stat),1-pnorm(z_stat))
p_val
y<-sample(20,x1,replace=F)
z_stat<-(mean(x1)-5)/(10/sqrt(n))
z_stat
p_val<-2*min(pnorm(z_stat),1-pnorm(z_stat))
p_val
z_tab<-qnorm(0.025)
z_tab
z_tab<-qnorm(0.025,lower.tail =F )
z_tab
m<-rbind(c(35,9),c(60,41))
colnames(m)<c("yes","no")
m
rownames(m)<-c("men","women")
colnames(m)<-c("yes","no")
m
chisq.test(m,correct=F)
a<-c(45,54,23,76)
b<-rep(1/6,6)
b<-rep(1/4,4)
chisq.test(a,prob=b,correct=F)
?chisq.test
chisq.test(a,p=b,correct=F)
head(cars)
cor.test(cars$speed,cars$dist)
a1<-rnorm(50,mean=0,sd=1)
b1<-rnorm(50,mean=0,sd=2)
var.test(a1,b1)
rm(list = ls())
longley
str(longley)
class(longley)
pairs(longley)
A<-lm(GNP~Population+Employed,data=longley)
summary(A)
aov(A)
?anova
?aov
?anova
anova(A)
fitted_A<-A$fitted.values
fitted_A
plot(longley)
plot(longley$GNP,type='l')
plot(longley$GNP,type='l',main="Actual vs fitted",xlab="",ylab="GNP")
points(fitted_A,pch=1,ylab="Fitted values",col=3)
a_resi<-A$residuals
plot(a_resi,main="Fitted vs Residuals",ylab="Residuals",xlab="")
abline(fitted_A)
line(fitted_A)
lines(fitted_A)
rm(list=ls())
#Generating cars every second
set.seed(123)
car<-vector()
for(i in 1:300)
{
car[i]<-rbinom(1,1,0.4)
}
data<-data.frame(cbind(times<-seq(1,300),car))
colnames(data)<-c("Time","Car")
#to calculate inter-arrival time
first<-0
k<-1
times[0]<-0
inter_arrival<-vector()
for(i in 1:300)
{
if(car[i]==1)
{
inter_arrival[k]<-times[i]-first
k<-k+1
first<-times[i]
}
}
inter_arrival
#applying poisson process to the above process
getN<-function(x,tt=1) {
if(sum(x)<tt)
return(NA)
if(x[1]>tt)
return(0)
else
return(max(which(cumsum(x)<=tt)))
}
#Getting the data
cars<-vector()
time<-vector()
k<-1
cars[0]<-0
for(i in seq(1,sum(inter_arrival)))
{
cars[k]<-getN(inter_arrival,i)
time[k]<-i
k<-k+1
}
reg_data<-data.frame(time,cars)
model<-glm(cars~time,family="poisson",data=reg_data)
summary(model)
predicted<-predict(model)
a_predicted<-sapply(predicted,exp)
plot(reg_data,type='l')
lines(a_predicted,col='red')
hist(reg_data)
pchisq(deviance(model),df.residual(model))
deviance(model)
df.residual(model)
model$coefficients
expression(model$coefficients$Intercept+model$coefficients$time*x)
chisq.test(a_predicted,reg_data$cars,correct=F)
rm(list = ls())
str(longley)
class(longley)
pairs(longley)
A<-lm(GNP~Population+Employed,data=longley)
summary(A)
anova(A)
fitted_A<-A$fitted.values
fitted_A
plot(longley)
plot(longley$GNP,type='l',main="Actual vs fitted",xlab="",ylab="GNP")
points(fitted_A,pch=1,ylab="Fitted values",col=3)
#Residuals
a_resi<-A$residuals
plot(a_resi,main="Fitted vs Residuals",ylab="Residuals",xlab="")
lines(fitted_A,col="red")
lines(y<-0")
lines(y<-0)
lines(y<-0)
abline(a=0)
abline(h=0)
qqnorm(a_resi,datax=T)
qqline(a_resi,datax=T,col='red')
?qqnorm
y<-seq(-10,10,by=0.1)
rm(list=ls())
f<-function(x)exp(-x)-5*x+6
y<-seq(-10,10,by=0.1)
plot(y,f(y),type='l')
y<-seq(-100,100,by=0.1)
plot(y,f(y),type='l')
y<-seq(-10,10,by=0.1)
plot(y,f(y),type='l')
rm(list=ls())
f<-function(x)exp(-x)-5*x+6
bisection0.root<-function(f,upper,lower,tol)
{
fa<-f(upper)
fb<-f(lower)
if(fa*fb>0)
stop("the root doest not lie between the given values")
repeat{
c<-(upper+lower)/2
fc<-f(c)
if(abs(fc)<=tol)break
if(fa*fc<0)upper=c
if(fb*fc<0)lower=c
}
return(c(c))
}
rm(list=ls())
f<-function(x)exp(-x)-5*x+6
bisection.root<-function(f,upper,lower,tol)
{
fa<-f(upper)
fb<-f(lower)
if(fa*fb>0)
stop("the root doest not lie between the given values")
repeat{
c<-(upper+lower)/2
fc<-f(c)
if(abs(fc)<=tol)break
if(fa*fc<0)upper=c
if(fb*fc<0)lower=c
}
return(c(c))
}
bisection.root(f,-10,10,0.0000001)
bisection.root(f,1,2,0.0001)
f(1)
f(2)
y<-seq(-5,5,length=100)
z<-f(y)
d<-cbind(y,z)
View(d)
View(d)
rm(list=ls())
f<-function(x)exp(-x)-5*x+6
bisection.root<-function(f,upper,lower,tol)
{
fa<-f(lower)
fb<-f(upper)
if(fa*fb>0)
stop("the root doest not lie between the given values")
repeat{
c<-(upper+lower)/2
fc<-f(c)
if(abs(fc)<=tol)break
if(fa*fc<0)upper=c
if(fb*fc<0)lower=c
}
return(c(c))
}
bisection.root(f,-5,5,0.00001)
rm(list=ls())
iter<-function(x)x-(f(x)/df(x))
f<-function(x)exp(-x)-5*x+6
df<-function(x)-exp(-x)-5
nr.root<-function(seed,tol)
{
x<-seed
repeat{
old<-x
x<-iter(x)
if(abs(old-x)<=tol)break
}
return(x)
}
nr.root(1,0.000001)
#case 1
rm(list=ls())
x<-read.csv("C:\\Users\\SAUKAURYA\\Desktop\\R\\sem 2\\exp_6_1.csv")
x
#convert into matrix
x<-data.matrix(x)
x
#convert into vector
y<-c(x)
y
#each treatment is replicated 4 times
treatment<-gl(n=6,k=4,length=24,labels=c("T1","T2","T3","T4","T5","T6"))
treatment
#each block is replicated 1 time
block<-gl(n=4,k=1,length=24,labels=c("B1","B2","B3","B4"))
block
#Two-way ANOVA
rbd<-aov(y~treatment+block)
rbd
summary(rbd)
#compare theoretical and empirical errors
qqnorm(rbd$residuals,datax=T)
qqline(rbd$residuals,datax=T,col=2)
#case 2
rm(list=ls())
x<-read.csv("C:\\Users\\SAUKAURYA\\Desktop\\R\\sem 2\\exp_6_2.csv")
x
aov.out<-aov(out~treatment+block,data=x)
aov.out
summary(aov.out)
replications(out~treatment+block,data=x)
TukeyHSD(aov.out)#,which=c("treatment","block"),ordered=T)
plot(TukeyHSD(aov.out,which=c("treatment","block"),ordered=T))
plot(TukeyHSD(aov.out))#,which=c("treatment","block"),ordered=T))
rm(list=ls())
#case 1
set.seed(123)
x<-rgamma(50,scale = 1/2,shape=2)
hist(x)
summary(x)
n<-length(x)
f1<-function(alpha)
{
n*log(n*alpha/sum(x))-n*digamma(alpha)+sum(log(x))
}
alpha.mle<-uniroot(f=f1,lower = 0.1,upper=10)$root
beta.mle<-n*alpha.mle/sum(x)
list(alpha.mle=alpha.mle,beta.mle=beta.mle)
# case 2
f2<-function(alpha)
{
n*alpha*log(n*alpha/sum(x))-n*log(gamma(alpha))+(alpha-1)*sum(log(x))-n*alpha
}
x1<-seq(0.1,10,length=100)
y1<-sapply(x1,f2)
plot(x1,y1,xlab=expression(alpha),ylab="LogL",type="l")
abline(v=alpha.mle,lty=2,col=2)
alpha.mle1<-optimize(f=f2,lower=0.1,upper=10,maximum=T)$maximum
beta.mle1<-n*alpha.mle1/sum(x)
list(alpha.mle=alpha.mle,beta.mle=beta.mle,alpha.mle1=alpha.mle1,beta.mle1=beta.mle1)
#case 3
f3<-function(p)
{
alpha<-p[1]
beta<-p[2]
(-1)*(n*alpha*log(beta)-n*log(gamma(alpha))+(alpha-1)*sum(log(x))-beta*sum(x))
}
optim(par=c(2,2),f3)
#case 4
require(lattice)
f4<-function(p)
{
n*p[1]*log(p[2])-n*log(gamma(p[1]))+(p[1]-1)*sum(log(x))-p[2]*sum(x)
}
x2<-seq(0.1,10,length=50)
y2<-seq(0.1,10,length=50)
g<-expand.grid(alpha=x2,beta=y2)
g$L<-apply(g,1,f4)
wireframe(L ~alpha*beta,data=g,xlab=expression(alpha),ylab=expression(beta),zlab=expression(logL),scales=list(arrows=F),drape=F,colorkey=F,screen=list(z=30,x=-60))
#case 5
z<-matrix(g$L,nrow=length(x))
contour(x2,y2,z,nlevels=30,xlab=expression(alpha),ylab=expression(beta))
points(alpha.mle,beta.mle,col=2,pch=16)
View(z)
View(z)
View(g)
rm(list=ls())
?rgamma
x<-rgamma(100,scale =1/ 2,shape = 2)
n<-100
rm(list=ls())
n<-100
x<-rgamma(100,scale =1/ 2,shape = 2)
f<-function(alpha)
{
n*alpha*log(n*alpha/sum(x))-n*log(gamma(x))+(alpha-1)*sum(log(x))-(n*alpha/sum(x))*sum(x)
}
alpha.mle<-uniroot(f,upper=10,lower=0.1)
rm(list=ls())
n<-100
x<-rgamma(100,scale =1/ 2,shape = 2)
f1<-function(alpha)
{
n*alpha*log(n*alpha/sum(x))-n*log(gamma(x))+(alpha-1)*sum(log(x))-(n*alpha/sum(x))*sum(x)
}
alpha.mle<-uniroot(f1,upper=10,lower=0.1)
alpha.mle<-uniroot(f1,upper=10,lower=0.1)$root
rm(list=ls())
n<-100
x<-rgamma(100,scale =1/ 2,shape = 2)
f1<-function(alpha)
{
n*log(n*alpha/sum(x))-n*digamma(x)+sum(log(x))
}
alpha.mle<-uniroot(f1,upper=10,lower=0.1)$root
alpha.mle<-uniroot(f1,lower=0.1,upper = 10)$root
rm(list=ls())
n<-100
x<-rgamma(100,scale =1/ 2,shape = 2)
f1<-function(alpha)
{
n*log(n*alpha/sum(x))-n*digamma(x)+sum(log(x))
}
alpha.mle<-uniroot(f=f1,lower=0.1,upper = 10)$root
rm(list=ls())
n<-100
set.seed(123)
x<-rgamma(100,scale =1/ 2,shape = 2)
f1<-function(alpha)
{
n*log(n*alpha/sum(x))-n*digamma(x)+sum(log(x))
}
alpha.mle<-uniroot(f=f1,lower=0.1,upper = 10)$root
set.seed(123)
x<-rgamma(50,scale = 1/2,shape=2)
hist(x)
summary(x)
n<-length(x)
f1<-function(alpha)
{
n*log(n*alpha/sum(x))-n*digamma(alpha)+sum(log(x))
}
alpha.mle<-uniroot(f=f1,lower = 0.1,upper=10)$root
beta.mle<-n*alpha.mle/sum(x)
list(alpha.mle=alpha.mle,beta.mle=beta.mle)
rm(list=ls())
set.seed(123)
x<-rgamma(100,scale =1/ 2,shape = 2)
n<-length(x)
f1<-function(alpha)
{
n*log(n*alpha/sum(x))-n*digamma(x)+sum(log(x))
}
alpha.mle<-uniroot(f=f1,lower=0.1,upper = 10)$root
rm(list=ls())
set.seed(123)
x<-rgamma(50,scale =1/ 2,shape = 2)
n<-length(x)
f1<-function(alpha)
{
n*log(n*alpha/sum(x))-n*digamma(x)+sum(log(x))
}
alpha.mle<-uniroot(f=f1,lower=0.1,upper = 10)$root
rm(list=ls())
set.seed(123)
x<-rgamma(50,scale =1/2,shape = 2)
n<-length(x)
f1<-function(alpha)
{
n*log(n*alpha/sum(x))-n*digamma(x)+sum(log(x))
}
alpha.mle<-uniroot(f=f1,lower=0.1,upper = 10)$root
rm(list=ls())
set.seed(123)
x<-rgamma(50,scale =1/2,shape = 2)
n<-length(x)
f1<-function(alpha)
{
n*log(n*alpha/sum(x))-n*digamma(alpha)+sum(log(x))
}
alpha.mle<-uniroot(f=f1,lower=0.1,upper = 10)$root
beta.mle<-n*alpha.mle/sum(x)
list(alpha.mle=alpha.mle,beta.mle=beta.mle)
x1<-seq(-50,50)
y1<-f1(x1)
x1<-seq(0,50)
y1<-f1(x1)
x1<-seq(1,50)
y1<-f1(x1)
plot(x1,y1,type="l")
f2<-function(alpha)
{
n*alpha*log(n*alpha/sum(x))-n*log(gamma(alpha))+(alpha-1)*sum(log(x))-(n*alpha)
}
x1<-seq(1,50)
y1<-f2(x1)
plot(x1,y1,type="l")
x1<-seq(-50,50)
y1<-f2(x1)
x1<-seq(0.1,100,by=0.1)
y1<-f2(x1)
plot(x1,y1,type="l")
x1<-seq(0.1,10,length=100)
y1<-f2(x1)
plot(x1,y1,type="l")
abline(v=alpha.mle,cex=2,col=2)
optimize(f=f2,lower=0.1,upper=10,maximum=T)$maximum
optim(par=c(2,2),fn=f3)
f3<-function(alpha)
{
(-1)*n*alpha*log(n*alpha/sum(x))-n*log(gamma(alpha))+(alpha-1)*sum(log(x))-(n*alpha)
}
optim(par=c(2,2),fn=f3)
f3<-function(p)
{
alpha<-p[1]
beta<-p[2]
(-1)*n*alpha*log(beta)-n*log(gamma(alpha))+(alpha-1)*sum(log(x))-(beta)*sum(x)
}
optim(fn=f3,par=c(2,2))
f3<-function(p)
{
alpha<-p[1]
beta<-p[2]
(-1)*(n*alpha*log(beta)-n*log(gamma(alpha))+(alpha-1)*sum(log(x))-(beta)*sum(x))
}
optim(fn=f3,par=c(2,2))
x2<-seq(0.1,10,length=100)
y2<-seq(0.1,10,length=100)
g<-expand.grid(x2,y2)
g$l<-apply(g,1,f3)
wireframe(l~x2*y2,data=g)
g<-expand.grid(alpha=x2,beta=y2)
g$l<-apply(g,1,f3)
wireframe(l~alpha*beta,data=g)
z<-matrix(g$l,nrow=length(g$l))
contour(x2,y2,z)
z<-matrix(g$l,nrow=length(x))
require(lattice)
contour(x2,y2,z)
x2<-seq(0.1,10,length=50)
y2<-seq(0.1,10,length=50)
g<-expand.grid(alpha=x2,beta=y2)
g$l<-apply(g,1,f3)
wireframe(l~alpha*beta,data=g)
z<-matrix(g$l,nrow=length(x))
require(lattice)
contour(x2,y2,z)
points(alpha.mle)
